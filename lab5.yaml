- name: Create production server
  hosts: localhost
  connection: local
  vars:
    terraform_rc_path: .terraformrc
    terraform_path: ./tf
  tasks:
    - name: Prepare TF (set yandex mirror)
      copy:
        src: "{{ terraform_rc_path }}"
        dest: ~/.terraformrc

    - name: Run terraform
      environment:
        TF_VAR_user_name: "{{ lookup('env', 'TF_VAR_user_name') }}"
        TF_VAR_password: "{{ lookup('env', 'TF_VAR_password') }}"
      terraform:
        project_path: "{{ terraform_path }}"
        force_init: yes
        state: present
      register: trfrm

    - name: Export server IP up
      lineinfile:
        path: ~/myenv
        regexp: '^DEPLOYMENT_SERVER_IP='
        line: "DEPLOYMENT_SERVER_IP={{ trfrm.outputs.servers.value.serverip }}"
        mode: '0644'
        create: yes

    - name: Add instance host (Ansible term)
      add_host:
        name: ivanov-server
        groups: nodes
        ansible_ssh_user: ubuntu
        ansible_host: "{{ trfrm.outputs.servers.value.serverip }}"
        ansible_ssh_private_key_file: ~/.ssh/2025-ivanov
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

- name: Wait for instance creating
  hosts: localhost
  connection: local     
  
  tasks:
    - name: Wait for a ssh port become available
      wait_for:
        host: "{{ trfrm.outputs.servers.value.serverip }}"
        port: 22

- name: Prepare production for deploy
  hosts: ivanov-server
  vars:
    service_path: botserver.service
    terraform_path: tf
  tasks:
    - block:
      - name: Add OpenJDK 21 repository
          apt_repository:
            repo: "ppa:openjdk-r/ppa"
            state: present
            
      - name: Install JDK
        apt:
          update_cache: yes
          name: openjdk-21-jdk-headless
          state: present
        become: yes

      - name: Create bot app service
        copy:
          src: "{{ service_path }}"
          dest: /etc/systemd/system/botserver.service
          mode: '0777'
        become: yes
    
      - name: Reload services
        systemd:
          daemon_reload: true
          name: botserver
          state: stopped
        become: yes
   
      rescue:
       - name: Clean up resources in case of error
         terraform:
           project_path: "{{ terraform_path }}"
           state: absent
         delegate_to: localhost
