- name: Create production server
  hosts: localhost
  connection: local
  become: yes
  vars:
    terraform_rc_path: .terraformrc
    terraform_path: ./tf-yandex
  tasks:
    - name: Install required packages
      apt:
        name: ["curl", "jq", "unzip"]
        state: present
        update_cache: yes

    - name: Install Yandex Cloud CLI
      block:
        - name: Download yc installer
          get_url:
            url: https://storage.yandexcloud.net/yandexcloud-yc/install.sh
            dest: /tmp/install-yc.sh
            mode: '0755'

        - name: Run installer
          command: /bin/bash /tmp/install-yc.sh
          args:
            creates: /usr/local/bin/yc

        - name: Ensure yc is in PATH
          lineinfile:
            path: /etc/environment
            line: 'PATH="/usr/local/bin:/home/ubuntu/yandex-cloud/bin:$PATH"'
            state: present
            regexp: '^PATH='

    - name: Check if YC CLI is already configured
      stat:
        path: ~/.config/yandex-cloud/config.yaml
      register: yc_configured

    - name: Create YC config directory
      file:
        path: ~/.config/yandex-cloud
        state: directory
        mode: '0755'
      when: not yc_configured.stat.exists

    - name: Create YC config file
      copy:
        dest: ~/.config/yandex-cloud/config.yaml
        content: |
          current: default
          profiles:
            default:
              token: "{{ lookup('env', 'YC_TOKEN') }}"
              cloud-id: "{{ lookup('env', 'YC_CLOUD_ID') }}"
              folder-id: "{{ lookup('env', 'YC_FOLDER_ID') }}"
        mode: '0600'
      when: not yc_configured.stat.exists and lookup('env', 'YC_TOKEN') != '' and lookup('env', 'YC_CLOUD_ID') != '' and lookup('env', 'YC_FOLDER_ID') != ''

    - name: Prepare TF (set yandex mirror)
      copy:
        src: "{{ terraform_rc_path }}"
        dest: ~/.terraformrc

    # Используем переменные окружения Jenkins напрямую с terraform
    - name: Run terraform
      terraform:
        project_path: "{{ terraform_path }}"
        force_init: yes
        state: present
      register: trfrm
      environment:
        YC_TOKEN: "{{ lookup('env', 'YC_TOKEN') }}"
        YC_CLOUD_ID: "{{ lookup('env', 'YC_CLOUD_ID') }}"
        YC_FOLDER_ID: "{{ lookup('env', 'YC_FOLDER_ID') }}"

    - name: Export server IP up
      lineinfile:
        path: ~/myenv
        regexp: '^DEPLOYMENT_SERVER_IP='
        line: "DEPLOYMENT_SERVER_IP={{ trfrm.outputs.servers.value.serverip }}"
        mode: '0644'
        create: yes

    - name: Add instance host (Ansible term)
      add_host:
        name: ivanov-server
        groups: nodes
        ansible_ssh_user: ubuntu
        ansible_host: "{{ trfrm.outputs.servers.value.serverip }}"
        ansible_ssh_private_key_file: ~/.ssh/2025-ivanov
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

- name: Wait for instance creating
  hosts: localhost
  connection: local     
  
  tasks:
    - name: Wait for a ssh port become available
      wait_for:
        host: "{{ hostvars.localhost.trfrm.outputs.servers.value.serverip }}"
        port: 22

- name: Prepare production for deploy
  hosts: ivanov-server
  vars:
    service_path: botserver.service
    terraform_path: tf
  tasks:
    - block:
      - name: Install Node.js and npm
        apt:
          name:
            - nodejs
            - npm
          state: present
          update_cache: yes
        become: yes

      - name: Install LocalTunnel globally
        npm:
          name: localtunnel
          global: yes
        become: yes
        
      - name: Add OpenJDK GPG key (без PPA)
        apt_key:
          url: "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xF7C313DB11F1ED148BB5117C08B3810CB7017B89"
          state: present
        become: yes

      - name: Add OpenJDK 21 repository manually
        apt_repository:
          repo: "deb [arch=amd64] https://ppa.launchpadcontent.net/openjdk-r/ppa/ubuntu {{ ansible_distribution_release }} main"
          state: present
          filename: "openjdk-21"  # Создает /etc/apt/sources.list.d/openjdk-21.list
        become: yes
            
      - name: Install JDK
        apt:
          update_cache: yes
          name: openjdk-21-jdk-headless
          state: present
        become: yes

      - name: Create bot app service
        copy:
          src: "{{ service_path }}"
          dest: /etc/systemd/system/botserver.service
          mode: '0644'
        become: yes
          
      - name: Reload services
        systemd:
          daemon_reload: true
          name: botserver
          state: stopped
        become: yes
   
      rescue:
       - name: Clean up resources in case of error
         terraform:
           project_path: "{{ terraform_path }}"
           state: absent
         delegate_to: localhost
